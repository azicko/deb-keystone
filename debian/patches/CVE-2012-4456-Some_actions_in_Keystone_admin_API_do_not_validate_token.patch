Description: Require authz for user role list
 Jason Xu (yinyangxu@gmail.com) discovered several vulnerabilities in OpenStack
 Keystone token verification:
 .
 The first occurs in the API /v2.0/OS-KSADM/services and
 /v2.0/OS-KSADM/services/{service_id}, the second occurs in
 /v2.0/tenants/{tenant_id}/users/{user_id}/roles
 .
 In both cases the OpenStack Keystone code fails to check if the tokens are
 valid. These issues have been addressed by adding checks in the form of
 test_service_crud_requires_auth() and test_user_role_list_requires_auth().
Bug-Debian: http://bugs.debian.org/689210
Bug-Ubuntu: https://bugs.launchpad.net/+bug/1006815
Author: Dolph Mathews <dolph.mathews@gmail.com>
Origin: Upstream

Index: keystone/keystone/identity/core.py
===================================================================
--- keystone.orig/keystone/identity/core.py	2012-10-01 06:25:52.000000000 +0000
+++ keystone/keystone/identity/core.py	2012-10-01 06:25:52.000000000 +0000
@@ -458,6 +458,7 @@
         not implementing them in hopes that the idea will die off.
 
         """
+        self.assert_admin(context)
         if tenant_id is None:
             raise exception.NotImplemented(message='User roles not supported: '
                                                    'tenant ID required')
Index: keystone/tests/test_content_types.py
===================================================================
--- keystone.orig/tests/test_content_types.py	2012-10-01 06:25:48.000000000 +0000
+++ keystone/tests/test_content_types.py	2012-10-01 06:25:52.000000000 +0000
@@ -16,6 +16,7 @@
 
 import httplib
 import json
+import uuid
 
 from lxml import etree
 import nose.exc
@@ -554,6 +555,49 @@
     def assertValidVersionResponse(self, r):
         self.assertValidVersion(r.body.get('version'))
 
+    def test_user_role_list_requires_auth(self):
+        """User role list should 401 without an X-Auth-Token (bug 1006815)."""
+        # values here don't matter because we should 401 before they're checked
+        path = '/v2.0/tenants/%(tenant_id)s/users/%(user_id)s/roles' % {
+                'tenant_id': uuid.uuid4().hex,
+                'user_id': uuid.uuid4().hex,
+        }
+
+        r = self.admin_request(path=path, expected_status=401)
+        self.assertValidErrorResponse(r)
+
+    def test_service_crud_requires_auth(self):
+        """Service CRUD should 401 without an X-Auth-Token (bug 1006822)."""
+        # values here don't matter because we should 401 before they're checked
+        service_path = '/v2.0/OS-KSADM/services/%s' % uuid.uuid4().hex
+        service_body = {
+                'OS-KSADM:service': {
+                    'name': uuid.uuid4().hex,
+                    'type': uuid.uuid4().hex,
+                    },
+                }
+
+        r = self.admin_request(method='GET',
+                               path='/v2.0/OS-KSADM/services',
+                               expected_status=401)
+        self.assertValidErrorResponse(r)
+
+        r = self.admin_request(method='POST',
+                               path='/v2.0/OS-KSADM/services',
+                               body=service_body,
+                               expected_status=401)
+        self.assertValidErrorResponse(r)
+
+        r = self.admin_request(method='GET',
+                               path=service_path,
+                               expected_status=401)
+        self.assertValidErrorResponse(r)
+
+        r = self.admin_request(method='DELETE',
+                               path=service_path,
+                               expected_status=401)
+        self.assertValidErrorResponse(r)
+
 
 class XmlTestCase(RestfulTestCase, CoreApiTests):
     xmlns = 'http://docs.openstack.org/identity/api/v2.0'
Index: keystone/keystone/catalog/core.py
===================================================================
--- keystone.orig/keystone/catalog/core.py	2012-10-01 06:25:48.000000000 +0000
+++ keystone/keystone/catalog/core.py	2012-10-01 06:25:52.000000000 +0000
@@ -116,29 +116,36 @@
 class ServiceController(wsgi.Application):
     def __init__(self):
         self.catalog_api = Manager()
+        self.identity_api = identity.Manager()
+        self.policy_api = policy.Manager()
+        self.token_api = token.Manager()
         super(ServiceController, self).__init__()
 
     # CRUD extensions
     # NOTE(termie): this OS-KSADM stuff is not very consistent
     def get_services(self, context):
+        self.assert_admin(context)
         service_list = self.catalog_api.list_services(context)
         service_refs = [self.catalog_api.get_service(context, x)
                         for x in service_list]
         return {'OS-KSADM:services': service_refs}
 
     def get_service(self, context, service_id):
+        self.assert_admin(context)
         service_ref = self.catalog_api.get_service(context, service_id)
         if not service_ref:
             raise exception.ServiceNotFound(service_id=service_id)
         return {'OS-KSADM:service': service_ref}
 
     def delete_service(self, context, service_id):
+        self.assert_admin(context)
         service_ref = self.catalog_api.get_service(context, service_id)
         if not service_ref:
             raise exception.ServiceNotFound(service_id=service_id)
         self.catalog_api.delete_service(context, service_id)
 
     def create_service(self, context, OS_KSADM_service):
+        self.assert_admin(context)
         service_id = uuid.uuid4().hex
         service_ref = OS_KSADM_service.copy()
         service_ref['id'] = service_id
