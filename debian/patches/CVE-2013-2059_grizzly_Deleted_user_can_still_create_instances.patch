Description: CVE-2013-2059 Revoke tokens on user delete
 Sam Stoelinga reported a vulnerability in Keystone. When users are deleted
 through Keystone v2 API, existing tokens for those users are not immediately
 invalidated and remain valid for the duration of the token's life (by default,
 up to 24 hours). This may result in users retaining access when the
 administrator of the system thought them disabled. You can workaround this
 issue by disabling a user before deleting it: in that case the tokens
 belonging to the disabled user are immediately invalidated. Keystone setups
 using the v3 API call to delete users are unaffected.
Author: Dolph Mathews <dolph.mathews@gmail.com>
Origin: Upstream, https://review.openstack.org/#/c/28678/
Ubuntu-Bug: https://bugs.launchpad.net/bugs/1166670
Debian-Bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=707598
Date: 2013-05-10

diff --git a/keystone/identity/controllers.py b/keystone/identity/controllers.py
index e82b81f..520db70 100644
--- a/keystone/identity/controllers.py
+++ b/keystone/identity/controllers.py
@@ -223,6 +223,7 @@ class User(controller.V2Controller):
     def delete_user(self, context, user_id):
         self.assert_admin(context)
         self.identity_api.delete_user(context, user_id)
+        self._delete_tokens_for_user(context, user_id)
 
     def set_user_enabled(self, context, user_id, user):
         return self.update_user(context, user_id, user)
diff --git a/tests/test_keystoneclient.py b/tests/test_keystoneclient.py
index dd7dc1d..f0ca1b3 100644
--- a/tests/test_keystoneclient.py
+++ b/tests/test_keystoneclient.py
@@ -396,6 +396,30 @@ class KeystoneClientTests(object):
                           self.get_client,
                           self.user_foo)
 
+    def test_delete_user_invalidates_token(self):
+        from keystoneclient import exceptions as client_exceptions
+
+        admin_client = self.get_client(admin=True)
+        client = self.get_client(admin=False)
+
+        username = uuid.uuid4().hex
+        password = uuid.uuid4().hex
+        user_id = admin_client.users.create(
+            name=username, password=password, email=uuid.uuid4().hex).id
+
+        token_id = client.tokens.authenticate(
+            username=username, password=password).id
+
+        # token should be usable before the user is deleted
+        client.tokens.authenticate(token=token_id)
+
+        admin_client.users.delete(user=user_id)
+
+        # authenticate with a token should not work after the user is deleted
+        self.assertRaises(client_exceptions.Unauthorized,
+                          client.tokens.authenticate,
+                          token=token_id)
+
     def test_token_expiry_maintained(self):
         foo_client = self.get_client(self.user_foo)
 
