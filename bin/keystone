#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Keystone Identity Server - Admin and Service API
"""

import optparse
import os
import sys

# If ../../keystone/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'keystone', '__init__.py')):
    sys.path.insert(0, possible_topdir)

import keystone.tools.tracer  # @UnusedImport # module runs on import
from keystone import version
from keystone.common import config
import keystone.server

if __name__ == '__main__':

    # Initialize a parser for our configuration paramaters
    # since we have special handling for --admin-port argument
    parser = optparse.OptionParser(version='%%prog %s' % version.version())
    common_group = config.add_common_options(parser)
    config.add_log_options(parser)

    # Handle a special argument to support starting two endpoints
    option = common_group.add_option(
        '-a', '--admin-port', dest="admin_port", metavar="PORT",
        help="specifies port for Admin API to listen on (default is 35357)")

    # Parse arguments and load config
    (options, args) = config.parse_options(parser)

    # Start services
    try:
        # Load Service API Server
        service = keystone.server.Server(name="Service API",
                                         config_name='keystone-legacy-auth',
                                         options=options, args=args)
        service.start(wait=False)
    except RuntimeError, e:
        sys.exit("ERROR: %s" % e)

    try:
        # Load Admin API server
        port = options.get('admin_port', None)
        host = options.get('bind_host', None)
        admin = keystone.server.Server(name='Admin API', config_name='admin',
                                       options=options, args=args)
        admin.start(host=host, port=port, wait=True)
    except RuntimeError, e:
        sys.exit("ERROR: %s" % e)
    finally:
        service.stop()
